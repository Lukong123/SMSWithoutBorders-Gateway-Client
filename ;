import threading
import dbus
from enum import Enum
import logging

from sms import SMS

dbus_name = 'org.freedesktop.ModemManager1'
modem_dbus_props_iface = 'org.freedesktop.DBus.Properties'


class Messaging:
    dbus_name = 'org.freedesktop.ModemManager1'
    modem_dbus_messaging_iface = 'org.freedesktop.ModemManager1.Modem.Messaging'

    class MMSmsStorage(Enum):
        MM_SMS_STORAGE_UNKNOWN = 0
        MM_SMS_STORAGE_SM      = 1
        MM_SMS_STORAGE_ME      = 2
        MM_SMS_STORAGE_MT      = 3
        MM_SMS_STORAGE_SR      = 4
        MM_SMS_STORAGE_BM      = 5
        MM_SMS_STORAGE_TA      = 6


    def __init__(self, modem, *args) -> None:
        """
        """
        self.modem = modem

        self.__new_received_message_handlers__ = []

        self.messaging = dbus.Interface(
                self.modem.dbus_modem, dbus_interface=self.modem_dbus_messaging_iface)

        self.messaging.connect_to_signal(
                "Added",
                handler_function=self.__message_property_changed_added__,
                path_keyword='path', 
                member_keyword='member', 
                interface_keyword='interface', 
                destination_keyword='destination',
                sender_keyword='sender')

        self.messaging.connect_to_signal(
                "PropertiesChanged",
                handler_function=self.__message_property_changed__,
                path_keyword='path', 
                member_keyword='member', 
                interface_keyword='interface', 
                destination_keyword='destination',
                sender_keyword='sender')

        self.sms = dbus.Interface(
                dbus_message, dbus_interface=modem_dbus_props_iface)

        self.modem_dbus_sms_iface = "org.freedesktop.ModemManager1.Sms"


    def __message_property_changed__(self, *args, **kwargs) -> None:
        """
        """


    def __message_property_changed_added__(self, *args, **kwargs) -> None:
        """
        """
        message_path = args[0]
        change_props = args[1]

        logging.debug("Message property changed Added - %s", args)

        sms = SMS(message_path, self)

        if sms.__is_received_message__():
            self.__broadcast_new_message__(sms)


    def check_available_messages(self) -> None:
        """
        """
        logging.debug("checking for available messages")
        try:
            available_messages = self.messaging.List()
            logging.debug("# Available received messages - [%d]", len(available_messages))

            for message_path in available_messages:
                message = SMS(message_path, self)

                if message.__is_received_message__():
                    self.__broadcast_new_message__(message)

                elif message.__is_receiving_message__():
                    logging.debug("\n\treceiving: %s", message_path)

        except Exception as error:
            raise error


    def __broadcast_new_message__(self, message: SMS) -> None:
        """
        """
        for message_handler in self.__new_received_message_handlers__:
            message_handler_thread = threading.Thread(target=message_handler,
                    args=(message,), daemon=True)

            message_handler_thread.start()


    def __waited_completed__(self, message: SMS) -> None:
        """
        """
        self.__broadcast_new_message__(message)


    def add_new_message_handler(self, new_received_message_handler) -> None:
        """
        """
        self.__new_received_message_handlers__.append(new_received_message_handler)
